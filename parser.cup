import java_cup.runtime.*;

terminal BOPM, BOMDP, LBRACK, RBRACK, LCBRACK, RCBRACK, ID, AOPER, NUM, COPER, LogA, LogO, LogX, ROPER, IDOPER, IF, ELSE, FOR, WHILE, DO, TRUE, FALSE, TER, DATATYPE, COMMA, COL, LSBRACK, RSBRACK, NEW, RETURN, SWITCH, CASE, DEFAULT, BREAK, COMMENT, SL_COMMENT, CLASS;

non terminal E, S, IF_STATEMENT, ELSE_STATEMENT, CONDITION, FOR_LOOP, WHILE_LOOP, DO_WHILE_LOOP, FOR_INIT, FOR_CONDITION, FOR_UPDATE, ASSIGNMENT, FUNCTION_CALL, PARAMETERS, PARAMETER, VARIABLE_DECLARATION, CLASS_DECLARATION, METHOD_DECLARATION, PARAMETER_LIST, BLOCK, STATEMENT, FOR_ASSIGNMENT, STATEMENTS, ARRAY_DECLARATION, ARRAY_ACCESS, ARRAY_INITIALIZER, ARRAY_ASSIGNMENT, RETURN_STATEMENT, SWITCH_STATEMENT, CASE_BLOCK, CASE_BLOCK_LIST, CASE_STATEMENT, DEFAULT_STATEMENT, METHODS;

precedence right AOPER;
precedence left ROPER;
precedence right COPER;
precedence left BOPM;
precedence left BOMDP;
precedence left LBRACK, RBRACK, LCBRACK, RCBRACK;
precedence right LogA, LogO, LogX;
precedence left IDOPER;

start with S;

S ::= CLASS_DECLARATION
    | METHODS;

METHODS ::= METHOD_DECLARATION
           | METHODS METHOD_DECLARATION;

STATEMENTS ::= STATEMENT
              | STATEMENTS STATEMENT;

CLASS_DECLARATION ::= CLASS ID LCBRACK METHODS RCBRACK;

IF_STATEMENT ::= IF LBRACK CONDITION RBRACK BLOCK ELSE_STATEMENT
              | IF LBRACK CONDITION RBRACK BLOCK;

ELSE_STATEMENT ::= ELSE BLOCK
                 | ELSE IF_STATEMENT;

WHILE_LOOP ::= WHILE LBRACK CONDITION RBRACK BLOCK;

DO_WHILE_LOOP ::= DO BLOCK WHILE LBRACK CONDITION RBRACK TER;

FOR_LOOP ::= FOR LBRACK FOR_INIT TER FOR_CONDITION TER FOR_UPDATE RBRACK BLOCK;

FOR_INIT ::= FOR_ASSIGNMENT
           | DATATYPE FOR_ASSIGNMENT
           | IDOPER ID
           | ID IDOPER
           | ;

FOR_CONDITION ::= CONDITION
                | ;

FOR_UPDATE ::= FOR_ASSIGNMENT
              | IDOPER ID
              | ID IDOPER
              | ;
              
CONDITION ::=  E ROPER E
            | TRUE
            | FALSE;

FOR_ASSIGNMENT ::= ID AOPER E;

BLOCK ::= LCBRACK RCBRACK 
        | LCBRACK  STATEMENTS RCBRACK;

STATEMENT ::= BLOCK
             | IF_STATEMENT
             | FOR_LOOP
             | WHILE_LOOP
             | DO_WHILE_LOOP
             | ASSIGNMENT
             | ARRAY_ASSIGNMENT
             | FUNCTION_CALL
             | RETURN_STATEMENT
             | VARIABLE_DECLARATION
             | SWITCH_STATEMENT
             | COMMENT
             | SL_COMMENT;

E ::= E COPER 
    | E IDOPER
    | IDOPER E
    | E ROPER E
    | E LogA E
    | E LogO E
    | LogX E
    | E BOPM E
    | E BOMDP E
    | LBRACK E RBRACK
    | ID
    | NUM
    | ARRAY_ACCESS;

VARIABLE_DECLARATION ::= DATATYPE ASSIGNMENT
                       | DATATYPE ID TER
                       | ARRAY_DECLARATION;

ARRAY_DECLARATION ::= DATATYPE ID LSBRACK RSBRACK TER 
                    | DATATYPE ID LSBRACK RSBRACK AOPER ARRAY_INITIALIZER;

ARRAY_ACCESS ::= ID LSBRACK E RSBRACK;

ARRAY_ASSIGNMENT ::= ID LSBRACK E RSBRACK AOPER E TER;

ASSIGNMENT ::= ID AOPER E TER 
            | IDOPER ID TER 
            | ID IDOPER TER ;

METHOD_DECLARATION ::= DATATYPE ID LBRACK PARAMETER_LIST RBRACK BLOCK;

PARAMETER_LIST ::= DATATYPE PARAMETER
                   | PARAMETER_LIST COMMA DATATYPE PARAMETER;

FUNCTION_CALL ::= ID LBRACK PARAMETERS RBRACK TER;

PARAMETERS ::= PARAMETER
              | PARAMETERS COMMA PARAMETER;
PARAMETER ::= ID | NUM | ARRAY_ACCESS;

ARRAY_INITIALIZER ::= LCBRACK PARAMETERS RCBRACK TER 
                | NEW DATATYPE LSBRACK NUM RSBRACK TER;

RETURN_STATEMENT ::= RETURN E TER;

SWITCH_STATEMENT ::= SWITCH LBRACK E RBRACK LCBRACK CASE_BLOCK_LIST RCBRACK;

CASE_BLOCK_LIST ::= CASE_BLOCK
                   | CASE_BLOCK_LIST CASE_BLOCK;

CASE_BLOCK ::= CASE_STATEMENT STATEMENTS BREAK TER
              | DEFAULT_STATEMENT BREAK TER;

CASE_STATEMENT ::= CASE E COL;

DEFAULT_STATEMENT ::= DEFAULT COL STATEMENTS;
