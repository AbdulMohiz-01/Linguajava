import java_cup.runtime.*;

terminal BOPM, BOMDP, LBRACK, RBRACK, LCBRACK, RCBRACK, ID, AOPER, NUM, COPER, LogA, LogO, LogX, ROPER, IDOPER, IF, ELSE, FOR, WHILE, DO, TRUE, FALSE, TER, DATATYPE, COMMA, COLON;

non terminal E, S, IF_STATEMENT, ELSE_STATEMENT, CONDITION, FOR_LOOP, WHILE_LOOP, DO_WHILE_LOOP, FOR_INIT, FOR_CONDITION, FOR_UPDATE, ASSIGNMENT, FUNCTION_CALL, FUNCTION_DECLARATION, PARAMETERS, PARAMETER, VARIABLE_DECLARATION, CLASS_DECLARATION, METHOD_DECLARATION, PARAMETER_LIST, BLOCK, STATEMENT, FOR_ASSIGNMENT,STATEMENTS;

precedence right AOPER;
precedence left ROPER;
precedence right COPER;
precedence left BOPM;
precedence left BOMDP;
precedence left LBRACK, RBRACK, LCBRACK, RCBRACK;
precedence right LogA, LogO, LogX;
precedence left IDOPER;

start with S;

S ::= CLASS_DECLARATION
    | METHOD_DECLARATION
    | IF_STATEMENT
    | FOR_LOOP
    | WHILE_LOOP
    | DO_WHILE_LOOP
    | VARIABLE_DECLARATION
    | ASSIGNMENT
    | FUNCTION_CALL;

CLASS_DECLARATION ::= DATATYPE ID LCBRACK RCBRACK;

IF_STATEMENT ::= IF LBRACK CONDITION RBRACK BLOCK ELSE_STATEMENT
              | IF LBRACK CONDITION RBRACK BLOCK;

ELSE_STATEMENT ::= ELSE BLOCK
                 | ELSE IF_STATEMENT;

WHILE_LOOP ::= WHILE LBRACK CONDITION RBRACK BLOCK;

DO_WHILE_LOOP ::= DO BLOCK WHILE LBRACK CONDITION RBRACK TER;

FOR_LOOP ::= FOR LBRACK FOR_INIT TER FOR_CONDITION TER FOR_UPDATE RBRACK BLOCK;

FOR_INIT ::= FOR_ASSIGNMENT
           | DATATYPE FOR_ASSIGNMENT
           | IDOPER ID
           | ID IDOPER
           | ;

FOR_CONDITION ::= CONDITION
                | ;

FOR_UPDATE ::= FOR_ASSIGNMENT
              | IDOPER ID
              | ID IDOPER
              | ;
              
CONDITION ::=  E ROPER E
            | TRUE
            | FALSE;

FOR_ASSIGNMENT ::= ID AOPER E;

BLOCK ::= LCBRACK RCBRACK
        | LCBRACK STATEMENTS RCBRACK;

STATEMENTS ::= STATEMENT
              | STATEMENTS STATEMENT;

STATEMENT ::= BLOCK
             | IF_STATEMENT
             | FOR_LOOP
             | WHILE_LOOP
             | DO_WHILE_LOOP
             | ASSIGNMENT
             | FUNCTION_CALL
             | VARIABLE_DECLARATION;

E ::= E COPER 
    | IDOPER E
    | E ROPER E
    | E LogA E
    | E LogO E
    | LogX E
    | E BOPM E
    | E BOMDP E
    | LBRACK E RBRACK
    | ID
    | NUM
    | ;


VARIABLE_DECLARATION ::= DATATYPE ASSIGNMENT
                       | DATATYPE ID TER;

ASSIGNMENT ::= ID AOPER E TER
            | IDOPER ID
            | ID IDOPER;

METHOD_DECLARATION ::= DATATYPE ID LBRACK PARAMETER_LIST RBRACK BLOCK;

PARAMETER_LIST ::= DATATYPE PARAMETER
                   | PARAMETER_LIST COMMA DATATYPE PARAMETER;

FUNCTION_CALL ::= ID LBRACK PARAMETERS RBRACK TER;

PARAMETERS ::= PARAMETER
              | PARAMETERS COMMA PARAMETER
              | ;
PARAMETER ::= ID;












