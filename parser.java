
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\012" +
    "\000\002\004\011\000\002\005\006\000\002\005\004\000" +
    "\002\010\011\000\002\007\015\000\002\011\003\000\002" +
    "\011\002\000\002\012\003\000\002\012\002\000\002\013" +
    "\003\000\002\013\002\000\002\006\005\000\002\006\003" +
    "\000\002\006\003\000\002\002\004\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\004\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\003\000\002\002\003\000\002\014\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\012\012\014\023\013\025\005\026\004\001" +
    "\002\000\004\006\102\001\002\000\004\006\065\001\002" +
    "\000\006\002\000\011\000\001\002\000\006\002\ufffd\011" +
    "\ufffd\001\002\000\004\002\064\001\002\000\006\002\ufffe" +
    "\011\ufffe\001\002\000\006\002\uffff\011\uffff\001\002\000" +
    "\004\006\043\001\002\000\004\013\015\001\002\000\012" +
    "\006\021\012\016\014\017\020\020\001\002\000\030\002" +
    "\uffe4\004\uffe4\005\uffe4\007\uffe4\011\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\021\uffe4\022\uffe4\031\uffe4\001\002\000\030\002" +
    "\uffe3\004\uffe3\005\uffe3\007\uffe3\011\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\021\uffe3\022\uffe3\031\uffe3\001\002\000\012\006" +
    "\021\012\016\014\017\020\020\001\002\000\012\006\021" +
    "\012\016\014\017\020\020\001\002\000\030\002\uffe2\004" +
    "\030\005\026\007\uffe2\011\uffe2\015\031\016\027\017\025" +
    "\021\024\022\023\031\uffe2\001\002\000\012\006\021\012" +
    "\016\014\017\020\020\001\002\000\012\006\021\012\016" +
    "\014\017\020\020\001\002\000\012\006\021\012\016\014" +
    "\017\020\020\001\002\000\012\006\021\012\016\014\017" +
    "\020\020\001\002\000\012\006\021\012\016\014\017\020" +
    "\020\001\002\000\012\006\021\012\016\014\017\020\020" +
    "\001\002\000\030\002\uffed\004\uffed\005\uffed\007\uffed\011" +
    "\uffed\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed\031\uffed" +
    "\001\002\000\030\002\uffe7\004\uffe7\005\026\007\uffe7\011" +
    "\uffe7\015\uffe7\016\027\017\025\021\uffe7\022\023\031\uffe7" +
    "\001\002\000\030\002\uffea\004\uffea\005\uffea\007\uffea\011" +
    "\uffea\015\uffea\016\027\017\025\021\uffea\022\023\031\uffea" +
    "\001\002\000\030\002\uffe6\004\uffe6\005\uffe6\007\uffe6\011" +
    "\uffe6\015\uffe6\016\027\017\025\021\uffe6\022\023\031\uffe6" +
    "\001\002\000\030\002\uffe9\004\uffe9\005\uffe9\007\uffe9\011" +
    "\uffe9\015\uffe9\016\027\017\025\021\uffe9\022\023\031\uffe9" +
    "\001\002\000\030\002\uffeb\004\030\005\026\007\uffeb\011" +
    "\uffeb\015\031\016\027\017\025\021\uffeb\022\023\031\uffeb" +
    "\001\002\000\030\002\uffec\004\uffec\005\uffec\007\uffec\011" +
    "\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec\031\uffec" +
    "\001\002\000\022\004\030\005\026\007\041\015\031\016" +
    "\027\017\025\021\024\022\023\001\002\000\030\002\uffe5" +
    "\004\uffe5\005\uffe5\007\uffe5\011\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\021\uffe5\022\uffe5\031\uffe5\001\002\000\030\002\uffe8" +
    "\004\uffe8\005\uffe8\007\uffe8\011\uffe8\015\uffe8\016\027\017" +
    "\025\021\uffe8\022\023\031\uffe8\001\002\000\016\006\021" +
    "\012\016\014\017\020\020\027\044\030\045\001\002\000" +
    "\006\007\uffef\031\uffef\001\002\000\006\007\uffee\031\uffee" +
    "\001\002\000\004\007\052\001\002\000\020\004\030\005" +
    "\026\015\031\016\027\017\025\021\050\022\023\001\002" +
    "\000\012\006\021\012\016\014\017\020\020\001\002\000" +
    "\024\004\030\005\026\007\ufff0\015\031\016\027\017\025" +
    "\021\uffeb\022\023\031\ufff0\001\002\000\004\010\053\001" +
    "\002\000\012\012\014\023\013\025\005\026\004\001\002" +
    "\000\004\011\055\001\002\000\010\002\ufffb\011\ufffb\024" +
    "\056\001\002\000\006\010\061\023\013\001\002\000\006" +
    "\002\ufffc\011\ufffc\001\002\000\006\002\ufff9\011\ufff9\001" +
    "\002\000\012\012\014\023\013\025\005\026\004\001\002" +
    "\000\004\011\063\001\002\000\006\002\ufffa\011\ufffa\001" +
    "\002\000\004\002\001\001\002\000\006\012\014\031\ufff5" +
    "\001\002\000\004\031\ufff6\001\002\000\004\031\070\001" +
    "\002\000\020\006\021\012\016\014\017\020\020\027\044" +
    "\030\045\031\ufff3\001\002\000\004\031\073\001\002\000" +
    "\004\031\ufff4\001\002\000\006\007\ufff1\012\014\001\002" +
    "\000\004\007\ufff2\001\002\000\004\007\076\001\002\000" +
    "\004\010\077\001\002\000\012\012\014\023\013\025\005" +
    "\026\004\001\002\000\004\011\101\001\002\000\006\002" +
    "\ufff7\011\ufff7\001\002\000\016\006\021\012\016\014\017" +
    "\020\020\027\044\030\045\001\002\000\004\007\104\001" +
    "\002\000\004\010\105\001\002\000\012\012\014\023\013" +
    "\025\005\026\004\001\002\000\004\011\107\001\002\000" +
    "\006\002\ufff8\011\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\014\003\007\004\005\007\011\010\010\014" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\041\001\001\000\004\002\037\001\001" +
    "\000\002\001\001\000\004\002\036\001\001\000\004\002" +
    "\035\001\001\000\004\002\034\001\001\000\004\002\033" +
    "\001\001\000\004\002\032\001\001\000\004\002\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\046\006\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\053\004\005\007\011\010\010\014\006" +
    "\001\001\000\002\001\001\000\004\005\056\001\001\000" +
    "\004\004\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\061\004\005\007\011\010\010\014\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\066\014\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\046\006\071\012\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\074\014" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\077\004\005\007\011\010\010\014" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\046\006\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\105\004\005\007\011\010\010\014\006" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= IF_STATEMENT 
            { parser.Tree.reduce(1,"S",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= FOR_LOOP 
            { parser.Tree.reduce(1,"S",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= WHILE_LOOP 
            { parser.Tree.reduce(1,"S",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= ASSIGNMENT 
            { parser.Tree.reduce(1,"S",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IF_STATEMENT ::= IF LBRACK CONDITION RBRACK LCBRACK S RCBRACK ELSE_STATEMENT 
            { parser.Tree.reduce(8,"IF_STATEMENT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IF_STATEMENT ::= IF LBRACK CONDITION RBRACK LCBRACK S RCBRACK 
            { parser.Tree.reduce(7,"IF_STATEMENT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ELSE_STATEMENT ::= ELSE LCBRACK S RCBRACK 
            { parser.Tree.reduce(4,"ELSE_STATEMENT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ELSE_STATEMENT ::= ELSE IF_STATEMENT 
            { parser.Tree.reduce(2,"ELSE_STATEMENT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // WHILE_LOOP ::= WHILE LBRACK CONDITION RBRACK LCBRACK S RCBRACK 
            { parser.Tree.reduce(7,"WHILE_LOOP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE_LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FOR_LOOP ::= FOR LBRACK FOR_INIT TER FOR_CONDITION TER FOR_UPDATE RBRACK LCBRACK S RCBRACK 
            { parser.Tree.reduce(11,"FOR_LOOP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_LOOP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FOR_INIT ::= ASSIGNMENT 
            { parser.Tree.reduce(1,"FOR_INIT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FOR_INIT ::= 
            { parser.Tree.reduce(0,"FOR_INIT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_INIT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FOR_CONDITION ::= CONDITION 
            { parser.Tree.reduce(1,"FOR_CONDITION",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_CONDITION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FOR_CONDITION ::= 
            { parser.Tree.reduce(0,"FOR_CONDITION",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_CONDITION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FOR_UPDATE ::= ASSIGNMENT 
            { parser.Tree.reduce(1,"FOR_UPDATE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FOR_UPDATE ::= 
            { parser.Tree.reduce(0,"FOR_UPDATE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONDITION ::= E ROPER E 
            { parser.Tree.reduce(3,"CONDITION",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONDITION ::= TRUE 
            { parser.Tree.reduce(1,"CONDITION",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONDITION ::= FALSE 
            { parser.Tree.reduce(1,"CONDITION",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E COPER 
            { parser.Tree.reduce(2,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E IDOPER E 
            { parser.Tree.reduce(3,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E ROPER E 
            { parser.Tree.reduce(3,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E LogA E 
            { parser.Tree.reduce(3,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E LogO E 
            { parser.Tree.reduce(3,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= LogX E 
            { parser.Tree.reduce(2,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E BOPM E 
            { parser.Tree.reduce(3,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E BOMDP E 
            { parser.Tree.reduce(3,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= LBRACK E RBRACK 
            { parser.Tree.reduce(3,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= ID 
            { parser.Tree.reduce(1,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= NUM 
            { parser.Tree.reduce(1,"E",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASSIGNMENT ::= ID AOPER E 
            { parser.Tree.reduce(3,"ASSIGNMENT",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
